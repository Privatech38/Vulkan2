@page "/zdravstvenipregledi/edit"
@using Microsoft.EntityFrameworkCore
@using Vulkan2Blazor.Models
@using Vulkan2Blazor.Models.ClanAttributes
@inject IDbContextFactory<Vulkan2Blazor.Data.Vulkan2Context> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>ZdravstveniPregled</h2>
<hr />
@if (ZdravstveniPregled is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="ZdravstveniPregled" OnValidSubmit="UpdateZdravstveniPregled" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="ZdravstveniPregled.ZdravstveniPregledId" value="@ZdravstveniPregled.ZdravstveniPregledId" />
                <div class="mb-3">
                    <label for="datum" class="form-label">Datum:</label>
                    <InputDate id="datum" @bind-Value="ZdravstveniPregled.Datum" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => ZdravstveniPregled.Datum" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="clan" class="form-label">ÄŒlan:</label>
                    <InputSelect id="clan" @bind-Value="ZdravstveniPregled.Clan" class="form-control">
                        <option value="">Izberi gasilsko drustvo</option>
                        @foreach (var clan in Clani)
                        {
                            <option value="@clan.ClanId">@clan.Ime @clan.Priimek (@clan.DatumRojstva)</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => ZdravstveniPregled.Clan" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="veljavnodo" class="form-label">VeljavnoDo:</label>
                    <InputDate id="veljavnodo" @bind-Value="ZdravstveniPregled.VeljavnoDo" class="form-control" />
                    <ValidationMessage For="() => ZdravstveniPregled.VeljavnoDo" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="opombe" class="form-label">Opombe:</label>
                    <InputText id="opombe" @bind-Value="ZdravstveniPregled.Opombe" class="form-control" />
                    <ValidationMessage For="() => ZdravstveniPregled.Opombe" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/zdravstvenipregledi">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int ZdravstveniPregledId { get; set; }

    [SupplyParameterFromForm]
    private ZdravstveniPregled? ZdravstveniPregled { get; set; }
    
    private List<Clan> Clani { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        ZdravstveniPregled ??= await context.ZdravstveniPregled.FirstOrDefaultAsync(m => m.ZdravstveniPregledId == ZdravstveniPregledId);
        Clani = await context.Clan.ToListAsync();

        if (ZdravstveniPregled is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateZdravstveniPregled()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(ZdravstveniPregled!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!ZdravstveniPregledExists(ZdravstveniPregled!.ZdravstveniPregledId))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/zdravstvenipregledi");
    }

    private bool ZdravstveniPregledExists(int zdravstvenipregledid)
    {
        using var context = DbFactory.CreateDbContext();
        return context.ZdravstveniPregled.Any(e => e.ZdravstveniPregledId == zdravstvenipregledid);
    }
}
